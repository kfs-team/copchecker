services:
  minio:
    image: quay.io/minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=ROOTUSERNAME
      - MINIO_ROOT_PASSWORD=ROOTPASSWORD
    networks:
     - minionetwork
    volumes:
      - 'minio_data:/data'
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: server /data --console-address ":9001"

  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    networks:
     - minionetwork
    entrypoint: >
      /bin/sh -c "
        until (/usr/bin/mc alias set myminio http://minio:9000 ROOTUSERNAME ROOTPASSWORD)
        do echo 'waiting for minio...'; sleep 3; done;
        /usr/bin/mc ls myminio/milvus-vdb || /usr/bin/mc mb myminio/milvus-vdb;
        /usr/bin/mc ls myminio/video-service-bucket || /usr/bin/mc mb myminio/video-service-bucket;
      "
      
  postgres:
    image: postgres:12
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    networks:
     - minionetwork
    volumes:
      - 'postgres_data:/var/lib/postgresql/data'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-setup:
    build: 
      context: ./video-service/migrations
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - minionetwork


  zoo:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zoo
    container_name: zoo
    networks:
      - minionetwork
    ports:
      - "2222:2222"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2222
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka
    container_name: kafka
    networks:
      - minionetwork
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo:2222"
      KAFKA_BROKER_ID: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
      - zoo
    volumes:
      - "kafka_data:/var/lib/kafka"
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 12G
        reservations:
          memory: 2G
    
  video-service:
    build: 
      context: ./video-service
    ports:
      - "1111:1111"
    depends_on:
      - minio-setup
      - postgres-setup
      - kafka
    networks:
      - minionetwork

  front:
    build: 
      context: ./front
    ports:
      - "8501:8501"
    environment:
      VIDEO_SERVICE_URL: http://video-service:1111
    networks:
      - minionetwork

  milvus-etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.5
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    networks:
     - milvus
    volumes:
      - "etcd_data:/etcd"
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.4.4
    command: [ "milvus", "run", "standalone" ]
    security_opt:
      - seccomp:unconfined
    environment:
      ETCD_ENDPOINTS: milvus-etcd:2379
      MINIO_ADDRESS: minio:9000
    networks:
     - milvus
     - minionetwork
    volumes:
      - ./configs/milvus_config.yaml:/milvus/configs/milvus.yaml
      - "milvus_data:/var/lib/milvus"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9091/healthz" ]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "9091:9091"
    depends_on:
      - milvus-etcd
      - minio-setup

  milvus-setup:
    build:
      context: ./emb-service
      dockerfile: ./scripts/Dockerfile
    depends_on:
      - milvus-standalone
      - milvus-etcd
    networks:
      - milvus
    entrypoint: >
      /bin/sh -c "
        python3 ./create_db.py --config ./emb_config.yaml
      "

  indexing-service:
    build:
      context: ./emb-service
    depends_on:
      - milvus-standalone
      - video-service
    networks:
      - milvus
      - minionetwork
    entrypoint: >
      /bin/sh -c "python3 app.py --service indexer --config emb_config.yaml"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]

  checking-service:
    build:
      context: ./emb-service
    depends_on:
      - milvus-standalone
      - video-service
    networks:
      - milvus
      - minionetwork
    entrypoint: >
      /bin/sh -c "python3 app.py --service checker --config emb_config.yaml"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [ gpu ]

networks:
 minionetwork:
   driver: bridge
 milvus:
   driver: bridge

volumes:
  minio_data:
    driver: local
  postgres_data:
    driver: local
  milvus_data:
    driver: local
  kafka_data:
    driver: local
  etcd_data:
    driver: local

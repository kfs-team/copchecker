services:
  minio:
    image: quay.io/minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=ROOTUSERNAME
      - MINIO_ROOT_PASSWORD=ROOTPASSWORD
    networks:
      - minionetwork
    volumes:
      - 'minio_data:/data'
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    command: server /data --console-address ":9001"

  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    networks:
     - minionetwork
    entrypoint: >
      /bin/sh -c "
        until (/usr/bin/mc alias set myminio http://minio:9000 ROOTUSERNAME ROOTPASSWORD)
        do echo 'waiting for minio...'; sleep 3; done;
        /usr/bin/mc ls myminio/milvus-vdb || /usr/bin/mc mb myminio/milvus-vdb;
        /usr/bin/mc ls myminio/another-bucket || /usr/bin/mc mb myminio/another-bucket;
        /usr/bin/mc ls myminio/video-service-bucket || /usr/bin/mc mb myminio/video-service-bucket;
      "

  postgres:
    image: postgres:12
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    networks:
      - minionetwork
    volumes:
      - 'postgres_data:/var/lib/postgresql/data'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-setup:
    build: 
      context: ./video-service/migrations
      dockerfile: Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - minionetwork

  video-service:
    build: 
      context: ./video-service
    ports:
      - "9999:9999"
    depends_on:
      - minio
      - postgres
      - minio-setup
      - postgres-setup
    networks:
      - minionetwork

networks:
  minionetwork:
    driver: bridge

volumes:
  minio_data:
    driver: local
  postgres_data:
    driver: local
